// Code generated by the codec package. DO NOT EDIT.

package codec

import (
	"reflect"

	"github.com/jba/codec/codecapi"
)

//// []interface {}

var slice_interface_type = reflect.TypeOf((*[]interface{})(nil)).Elem()

type slice_interface_codec struct {
	codecapi.NonStruct
}

func (c *slice_interface_codec) TypesUsed() []reflect.Type      { return nil }
func (c *slice_interface_codec) SetCodecs([]codecapi.TypeCodec) {}

func (c *slice_interface_codec) Encode(e *codecapi.Encoder, x interface{}) {
	c.encode(e, x.([]interface{}))
}

func (c *slice_interface_codec) encode(e *codecapi.Encoder, s []interface{}) {
	if s == nil {
		e.EncodeNil()
		return
	}
	e.StartList(len(s))
	for _, x := range s {
		e.EncodeAny(x)
	}
}

func (c *slice_interface_codec) Decode(d *codecapi.Decoder) interface{} {
	var x []interface{}
	c.decode(d, &x)
	return x
}

func (c *slice_interface_codec) decode(d *codecapi.Decoder, p *[]interface{}) {
	n := d.StartList()
	if n < 0 {
		return
	}
	s := make([]interface{}, n)
	for i := 0; i < n; i++ {
		s[i] = d.DecodeAny()
	}
	*p = s
}

func init() {
	codecapi.Register(slice_interface_type, func() codecapi.TypeCodec { return &slice_interface_codec{} })
}
