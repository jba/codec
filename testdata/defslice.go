// Code generated by the codec package. DO NOT EDIT.

package codec

import (
	"github.com/jba/codec/codecapi"
	"reflect"
)

type definedSlice_codec struct {
}

func (c *definedSlice_codec) Init(tcs map[reflect.Type]codecapi.TypeCodec) {

}

func (c *definedSlice_codec) Fields() []string { return nil }

func (c *definedSlice_codec) Encode(e *codecapi.Encoder, x interface{}) {
	c.encode(e, x.(definedSlice))
}

func (c *definedSlice_codec) encode(e *codecapi.Encoder, s definedSlice) {
	if s == nil {
		e.EncodeNil()
		return
	}
	e.StartList(len(s))
	for _, x := range s {
		e.EncodeInt(int64(x))
	}
}

func (c *definedSlice_codec) Decode(d *codecapi.Decoder) interface{} {
	var x definedSlice
	c.decode(d, &x)
	return x
}

func (c *definedSlice_codec) decode(d *codecapi.Decoder, p *definedSlice) {
	n := d.StartList()
	if n < 0 {
		return
	}
	s := make([]int, n)
	for i := 0; i < n; i++ {
		s[i] = int(d.DecodeInt())
	}
	*p = s
}

func init() {
	codecapi.Register(definedSlice(nil), func() codecapi.TypeCodec { return &definedSlice_codec{} })
}
