// Code generated by the codec package. DO NOT EDIT.

package somepkg

import (
	"github.com/jba/codec/codecapi"
)

type slice_slice_int_codec struct{}

func (slice_slice_int_codec) Init() {}

func (c slice_slice_int_codec) Encode(e *codecapi.Encoder, x interface{}) { c.encode(e, x.([][]int)) }

func (c slice_slice_int_codec) encode(e *codecapi.Encoder, s [][]int) {
	if s == nil {
		e.EncodeNil()
		return
	}
	e.StartList(len(s))
	for _, x := range s {
		(slice_int_codec{}).encode(e, x)
	}
}

func (c slice_slice_int_codec) Decode(d *codecapi.Decoder) interface{} {
	var x [][]int
	c.decode(d, &x)
	return x
}

func (c slice_slice_int_codec) decode(d *codecapi.Decoder, p *[][]int) {
	n := d.StartList()
	if n < 0 {
		return
	}
	s := make([][]int, n)
	for i := 0; i < n; i++ {
		(slice_int_codec{}).decode(d, &s[i])
	}
	*p = s
}

func init() {
	codecapi.Register([][]int(nil), slice_slice_int_codec{})
}

type slice_int_codec struct{}

func (slice_int_codec) Init() {}

func (c slice_int_codec) Encode(e *codecapi.Encoder, x interface{}) { c.encode(e, x.([]int)) }

func (c slice_int_codec) encode(e *codecapi.Encoder, s []int) {
	if s == nil {
		e.EncodeNil()
		return
	}
	e.StartList(len(s))
	for _, x := range s {
		e.EncodeInt(int64(x))
	}
}

func (c slice_int_codec) Decode(d *codecapi.Decoder) interface{} {
	var x []int
	c.decode(d, &x)
	return x
}

func (c slice_int_codec) decode(d *codecapi.Decoder, p *[]int) {
	n := d.StartList()
	if n < 0 {
		return
	}
	s := make([]int, n)
	for i := 0; i < n; i++ {
		s[i] = int(d.DecodeInt())
	}
	*p = s
}

func init() {
	codecapi.Register([]int(nil), slice_int_codec{})
}
