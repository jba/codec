// Code generated by the codec package. DO NOT EDIT.

package codec

import (
	"reflect"

	"github.com/jba/codec/codecapi"
)

//// []codec.marsh

var slice_marsh_type = reflect.TypeOf((*[]marsh)(nil)).Elem()

type slice_marsh_codec struct {
	codecapi.NonStruct

	marsh_codec *marsh_codec
}

func (c *slice_marsh_codec) TypesUsed() []reflect.Type {
	return []reflect.Type{marsh_type}
}

func (c *slice_marsh_codec) SetCodecs(tcs []codecapi.TypeCodec) {
	c.marsh_codec = tcs[0].(*marsh_codec)
}

func (c *slice_marsh_codec) Encode(e *codecapi.Encoder, x interface{}) { c.encode(e, x.([]marsh)) }

func (c *slice_marsh_codec) encode(e *codecapi.Encoder, s []marsh) {
	if s == nil {
		e.EncodeNil()
		return
	}
	e.StartList(len(s))
	for _, x := range s {
		c.marsh_codec.encode(e, x)
	}
}

func (c *slice_marsh_codec) Decode(d *codecapi.Decoder) interface{} {
	var x []marsh
	c.decode(d, &x)
	return x
}

func (c *slice_marsh_codec) decode(d *codecapi.Decoder, p *[]marsh) {
	n := d.StartList()
	if n < 0 {
		return
	}
	s := make([]marsh, n)
	for i := 0; i < n; i++ {
		c.marsh_codec.decode(d, &s[i])
	}
	*p = s
}

func init() {
	codecapi.Register([]marsh(nil), func() codecapi.TypeCodec { return &slice_marsh_codec{} })
}

//// codec.marsh

var marsh_type = reflect.TypeOf((*marsh)(nil)).Elem()

type marsh_codec struct {
	codecapi.NonStruct
}

func (c *marsh_codec) TypesUsed() []reflect.Type { return nil }

func (c *marsh_codec) SetCodecs([]codecapi.TypeCodec) {}

func (c *marsh_codec) Encode(e *codecapi.Encoder, x interface{}) { c.encode(e, x.(marsh)) }

func (c *marsh_codec) encode(e *codecapi.Encoder, m marsh) {
	data, err := m.MarshalText()
	if err != nil {
		codecapi.Fail(err)
	}
	e.EncodeBytes(data)
}

func (c *marsh_codec) Decode(d *codecapi.Decoder) interface{} {
	var x marsh
	c.decode(d, &x)
	return x
}

func (c *marsh_codec) decode(d *codecapi.Decoder, p *marsh) {
	data := d.DecodeBytes()
	if err := p.UnmarshalText(data); err != nil {
		codecapi.Fail(err)
	}
}

func init() {
	codecapi.Register(*new(marsh), func() codecapi.TypeCodec { return &marsh_codec{} })
}
