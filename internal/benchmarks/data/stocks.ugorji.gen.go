// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package data

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF8113 = 1
	codecSelferCcRAW113  = 255
	// ----- value types used ----
	codecSelferValueTypeArray113     = 10
	codecSelferValueTypeMap113       = 9
	codecSelferValueTypeString113    = 6
	codecSelferValueTypeInt113       = 2
	codecSelferValueTypeUint113      = 3
	codecSelferValueTypeFloat113     = 4
	codecSelferValueTypeNil113       = 1
	codecSelferBitsize113            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil113 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct113 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer113 struct{}

func codecSelfer113False() bool { return false }
func codecSelfer113True() bool  { return true }

func init() {
	if codec1978.GenVersion != 20 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 20, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ time.Time
	}
}

func (x *StockData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Symbol))
			z.EncWriteArrayElem()
			if x.Intervals == nil {
				r.EncodeNil()
			} else {
				h.encSliceInterval(([]Interval)(x.Intervals), e)
			} // end block: if x.Intervals slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Symbol\"")
			} else {
				r.EncodeString(`Symbol`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Symbol))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Intervals\"")
			} else {
				r.EncodeString(`Intervals`)
			}
			z.EncWriteMapElemValue()
			if x.Intervals == nil {
				r.EncodeNil()
			} else {
				h.encSliceInterval(([]Interval)(x.Intervals), e)
			} // end block: if x.Intervals slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *StockData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil113 {
		*(x) = StockData{}
	} else if yyct2 == codecSelferValueTypeMap113 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray113 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct113)
	}
}

func (x *StockData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "Symbol":
			x.Symbol = (string)(string(r.DecodeStringAsBytes()))
		case "Intervals":
			h.decSliceInterval((*[]Interval)(&x.Intervals), d)
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *StockData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Symbol = (string)(string(r.DecodeStringAsBytes()))
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = z.DecCheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceInterval((*[]Interval)(&x.Intervals), d)
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = z.DecCheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
}

func (x *StockData) IsCodecEmpty() bool {
	return !(x.Symbol != "" || len(x.Intervals) != 0 || false)
}

func (x *Interval) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(7)
			z.EncWriteArrayElem()
			if !z.EncBasicHandle().TimeNotBuiltin {
				r.EncodeTime(x.Start)
			} else if yyxt10 := z.Extension(x.Start); yyxt10 != nil {
				z.EncExtension(x.Start, yyxt10)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.Start)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.Start)
			} else {
				z.EncFallback(x.Start)
			}
			z.EncWriteArrayElem()
			if !z.EncBasicHandle().TimeNotBuiltin {
				r.EncodeTime(x.End)
			} else if yyxt11 := z.Extension(x.End); yyxt11 != nil {
				z.EncExtension(x.End, yyxt11)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.End)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.End)
			} else {
				z.EncFallback(x.End)
			}
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.Open))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.Close))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.Low))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.High))
			z.EncWriteArrayElem()
			r.EncodeFloat64(float64(x.Volume))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(7)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Start\"")
			} else {
				r.EncodeString(`Start`)
			}
			z.EncWriteMapElemValue()
			if !z.EncBasicHandle().TimeNotBuiltin {
				r.EncodeTime(x.Start)
			} else if yyxt17 := z.Extension(x.Start); yyxt17 != nil {
				z.EncExtension(x.Start, yyxt17)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.Start)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.Start)
			} else {
				z.EncFallback(x.Start)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"End\"")
			} else {
				r.EncodeString(`End`)
			}
			z.EncWriteMapElemValue()
			if !z.EncBasicHandle().TimeNotBuiltin {
				r.EncodeTime(x.End)
			} else if yyxt18 := z.Extension(x.End); yyxt18 != nil {
				z.EncExtension(x.End, yyxt18)
			} else if z.EncBinary() {
				z.EncBinaryMarshal(x.End)
			} else if !z.EncBinary() && z.IsJSONHandle() {
				z.EncJSONMarshal(x.End)
			} else {
				z.EncFallback(x.End)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Open\"")
			} else {
				r.EncodeString(`Open`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.Open))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Close\"")
			} else {
				r.EncodeString(`Close`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.Close))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Low\"")
			} else {
				r.EncodeString(`Low`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.Low))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"High\"")
			} else {
				r.EncodeString(`High`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.High))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Volume\"")
			} else {
				r.EncodeString(`Volume`)
			}
			z.EncWriteMapElemValue()
			r.EncodeFloat64(float64(x.Volume))
			z.EncWriteMapEnd()
		}
	}
}

func (x *Interval) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil113 {
		*(x) = Interval{}
	} else if yyct2 == codecSelferValueTypeMap113 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray113 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct113)
	}
}

func (x *Interval) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "Start":
			if !z.DecBasicHandle().TimeNotBuiltin {
				x.Start = r.DecodeTime()
			} else if yyxt5 := z.Extension(x.Start); yyxt5 != nil {
				z.DecExtension(&x.Start, yyxt5)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.Start)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.Start)
			} else {
				z.DecFallback(&x.Start, false)
			}
		case "End":
			if !z.DecBasicHandle().TimeNotBuiltin {
				x.End = r.DecodeTime()
			} else if yyxt7 := z.Extension(x.End); yyxt7 != nil {
				z.DecExtension(&x.End, yyxt7)
			} else if z.DecBinary() {
				z.DecBinaryUnmarshal(&x.End)
			} else if !z.DecBinary() && z.IsJSONHandle() {
				z.DecJSONUnmarshal(&x.End)
			} else {
				z.DecFallback(&x.End, false)
			}
		case "Open":
			x.Open = (float64)(r.DecodeFloat64())
		case "Close":
			x.Close = (float64)(r.DecodeFloat64())
		case "Low":
			x.Low = (float64)(r.DecodeFloat64())
		case "High":
			x.High = (float64)(r.DecodeFloat64())
		case "Volume":
			x.Volume = (float64)(r.DecodeFloat64())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Interval) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if !z.DecBasicHandle().TimeNotBuiltin {
		x.Start = r.DecodeTime()
	} else if yyxt15 := z.Extension(x.Start); yyxt15 != nil {
		z.DecExtension(&x.Start, yyxt15)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.Start)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.Start)
	} else {
		z.DecFallback(&x.Start, false)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if !z.DecBasicHandle().TimeNotBuiltin {
		x.End = r.DecodeTime()
	} else if yyxt17 := z.Extension(x.End); yyxt17 != nil {
		z.DecExtension(&x.End, yyxt17)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(&x.End)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(&x.End)
	} else {
		z.DecFallback(&x.End, false)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Open = (float64)(r.DecodeFloat64())
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Close = (float64)(r.DecodeFloat64())
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Low = (float64)(r.DecodeFloat64())
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.High = (float64)(r.DecodeFloat64())
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = z.DecCheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Volume = (float64)(r.DecodeFloat64())
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = z.DecCheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
}

func (x *Interval) IsCodecEmpty() bool {
	return !(!(x.Start.IsZero()) || !(x.End.IsZero()) || x.Open != 0 || x.Close != 0 || x.Low != 0 || x.High != 0 || x.Volume != 0 || false)
}

func (x codecSelfer113) encSliceInterval(v []Interval, e *codec1978.Encoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &yyv1
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			yy2.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer113) decSliceInterval(v *[]Interval, d *codec1978.Decoder) {
	var h codecSelfer113
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Interval{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Interval, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Interval, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Interval{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Interval, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
